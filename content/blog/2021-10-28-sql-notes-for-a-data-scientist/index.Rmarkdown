---
author: Tuo Wang
categories:
  - Data Science
date: "2021-10-28"
draft: false
excerpt: My personal notes for learning SQL
subtitle:
title: SQL notes for a data scientist
---

These my personal notes for learning SQL.

### Some great tutorials

```{r include = FALSE}
knitr::opts_chunk$set(eval = FALSE, collapse = TRUE, comment = NA)
```



Learning basic SQL:

- [MODE SQL Tutorial](https://mode.com/sql-tutorial/introduction-to-sql/)

Advanced SQL:

- [SQL Tutorial: How To Write Better Queries](https://www.datacamp.com/community/tutorials/sql-tutorial-query)
- [Performance Tuning SQL Queries](https://mode.com/sql-tutorial/sql-performance-tuning/)
- [Order of execution of a Query](https://sqlbolt.com/lesson/select_queries_order_of_execution)
- [Window Functions](https://www.postgresql.org/docs/9.1/tutorial-window.html)

Difference between `INNER JOIN`, `LEFT JOIN`, `RIGHT JOIN` and `OUTER JOIN`

- [Visual JOIN](https://joins.spathon.com/)


### SQL Date Functions

1. ADD days

```{sql eval=FALSE, include=TRUE}
# MySQL - DATE_ADD, syntax: DATE_ADD(date, INTERVAL value addunit)

SELECT DATE_ADD("2017-06-15 09:34:21", INTERVAL 15 MINUTE);
SELECT DATE_ADD("2017-06-15", INTERVAL 10 DAY); # forward 10 days
SELECT DATE_ADD("2017-06-15", INTERVAL -10 DAY); # backward 10 days
# For substraction, we can also use DATE_SUB
SELECT DATE_SUB("2017-06-15", INTERVAL 10 DAY); 

# Note that, we can use CAST .. AS DATE to transform timestamp to date
SELECT CAST("2017-06-15 09:34:21" AS DATE);
# This transform "2017-06-15 09:34:21" -> "2017-06-15"
# OR we can use DATE() function
SELECT DATE("2017-06-15 09:34:21"); # "2017-06-15 09:34:21" -> "2017-06-15"
```

2. DATE difference

```{sql eval=FALSE, include=TRUE}
# MySQL  DATEDIFF: Return the number of *days* between two date values:
SELECT DATEDIFF('2017/08/25', '2011/08/25');
SELECT DATEDIFF('2017/08/25', '2011/08/25');
SELECT DATEDIFF('2017/08/25', '2011/08/25');

# TIMEDIFF : Return the difference between two time expressions:
SELECT TIMEDIFF("2017-06-25 13:10:11", "2017-06-15 13:10:10");
```

3. Current Date

```{sql eval=FALSE, include=TRUE}
# MySQL
SELECT CURRENT_DATE(); # retrun current date: "YYYY-MM-DD"
SELECT CURRENT_TIMESTAMP(); # return current date and time: "YYYY-MM-DD HH-MM-SS"
```

4. Reformat date

```{sql eval=FALSE, include=TRUE}
# MySQL
SELECT DATE_FORMAT("2017-06-15", "%Y"); # -> 2017
SELECT DATE_FORMAT("2017-06-15", "%Y-%m"); # -> 2017-06
```

5. Get specific infor from date

```{sql eval=FALSE, include=TRUE}
# MySQL

# (1). EXTRACT()

SELECT EXTRACT(MONTH FROM "2017-06-15"); # -> 6
SELECT EXTRACT(WEEK FROM "2017-06-15"); # -> 24
SELECT EXTRACT(YEAR_MONTH FROM "2017-06-15"); # -> 201706

# (2). WEEKDAY()
# The WEEKDAY() function returns the weekday number for a given date.
# Note: 0 = Monday, 1 = Tuesday, 2 = Wednesday, 3 = Thursday, 
# 4 = Friday, 5 = Saturday, 6 = Sunday.
SELECT WEEKDAY("2017-06-15");

# (3). YEARWEEK()
SELECT YEARWEEK("2017-06-15"); # -> 201724
```

6. Past N days

```{sql eval=FALSE, include=TRUE}
# MySQL

# (1). EXTRACT()

SELECT EXTRACT(MONTH FROM "2017-06-15"); # -> 6
SELECT EXTRACT(WEEK FROM "2017-06-15"); # -> 24
SELECT EXTRACT(YEAR_MONTH FROM "2017-06-15"); # -> 201706

# (2). WEEKDAY()
# The WEEKDAY() function returns the weekday number for a given date.
# Note: 0 = Monday, 1 = Tuesday, 2 = Wednesday, 3 = Thursday, 
# 4 = Friday, 5 = Saturday, 6 = Sunday.
SELECT WEEKDAY("2017-06-15");

# (3). YEARWEEK()
SELECT YEARWEEK("2017-06-15"); -> 201724
```

7. Use `LEFT` to reformat date 

```{sql eval=FALSE, include=TRUE}
SELECT LEFT("2017-06-15", 7); # -> "2017-06"

# Sometimes the RIGHT() function can be helpful.
```


8. unixtim

```{sql eval=FALSE, include=TRUE}
SELECT FROM_UNIXTIME(1255033470); # -> 2009-10-08 20:24:30
SELECT DATE(FROM_UNIXTIME(1255033470)); # -> 2009-10-08
```
